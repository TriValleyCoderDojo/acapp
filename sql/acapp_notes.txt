
mysql -u root -p
root

---------------------------------------------------

-- create a data and start using it
create database acapp;
use acapp;

---------------------------------------------------

-- create a database user for tghe web app to use
CREATE USER 'acappuser'@'bobdev' IDENTIFIED BY 'acappuser';
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'acappuser'@'bobdev';
GRANT SELECT,INSERT,UPDATE,DELETE,LOCK TABLES,EXECUTE ON acapp.* TO 'acappuser'@'bobdev';
GRANT CREATE,DROP ON acapp.* TO 'acappuser'@'bobdev';
GRANT ALTER ON acapp.* TO 'acappuser'@'bobdev';
FLUSH PRIVILEGES;

-- test logging in with the user created above
mysql -h bobdev -u acappuser -D acapp -p
mysql -u acappuser -D acapp -p

---------------------------------------------------

-- create new tables in the acapp database
CREATE TABLE restaurant (
    id bigint(20) NOT NULL AUTO_INCREMENT, 
    version bigint(20),
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255), 
    city VARCHAR(50) NOT NULL, 
    state VARCHAR(20) NOT NULL, 
    zip VARCHAR(20) NOT NULL, 
    latitude FLOAT( 10, 6 ) NOT NULL,
    longitude FLOAT( 10, 6 ) NOT NULL,
    green_cnt INT,
    yellow_cnt INT,
    red_cnt INT,
    phone VARCHAR(255),
    url VARCHAR(255),
    PRIMARY KEY (id));
    
    
CREATE TABLE inspection (
    id bigint(20) NOT NULL AUTO_INCREMENT, 
    version bigint(20),
    date datetime,
    service VARCHAR(10), 
    description VARCHAR(255), 
    grade VARCHAR(10), 
    restaurant_id bigint(20),
    PRIMARY KEY (id),
    KEY FK686B0D7494B6F2F4 (restaurant_id),
    CONSTRAINT FK686B0D7494B6F2F4 FOREIGN KEY (restaurant_id) REFERENCES restaurant (id)
);

CREATE TABLE review (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  version bigint(20) NOT NULL,
  cuisine varchar(255) NOT NULL,
  dollar_rating int(11) NOT NULL,
  rating DECIMAL(3,1) NOT NULL,
  restaurant_id bigint(20) NOT NULL,
  review_type varchar(255) NOT NULL,
  url varchar(255) NOT NULL,
  PRIMARY KEY (id),
  KEY FKC84EF75894B6F2F4 (restaurant_id),
  CONSTRAINT FKC84EF75894B6F2F4 FOREIGN KEY (restaurant_id) REFERENCES restaurant (id)
);

-- in case you need to start over
DROP TABLE inspection;
DROP TABLE restaurant;
DROP TABLE review;

---------------------------------------------------

-- some SQL to explore the data

SELECT COUNT(*) FROM restaurant;
SELECT count(*) FROM inspection;

SELECT * FROM restaurant;
SELECT * FROM inspection;
SELECT * FROM restaurant LIMIT 10;
SELECT * FROM inspection LIMIT 10;

SELECT id from restaurant WHERE NAME = 'SOME NAME';
SELECT * from restaurant WHERE NAME LIKE "Sozo%";


SELECT zip, COUNT(zip) FROM restaurant GROUP BY zip ORDER BY zip;
SELECT zip, COUNT(zip) FROM restaurant GROUP BY zip ORDER BY COUNT(zip) DESC;

SELECT grade, COUNT(grade) FROM inspection GROUP BY grade;

select city, COUNT(city) FROM restaurant GROUP BY city;

select distinct zip, city, state from restaurant order by zip desc;
select zip, city, state, count(zip) from restaurant group by zip order by zip desc;

select name, latitude, longitude FROM restaurant WHERE zip = '95483';

SELECT * FROM restaurant where id = 4325;
SELECT * FROM inspection where restaurant_id = 4325;
SELECT * FROM review where restaurant_id = 4325;

SELECT id, name, zip, curr_grade, green_cnt, yellow_cnt, red_cnt FROM restaurant WHERE curr_grade = 'R';
SELECT id, name, zip, curr_grade, count(zip) FROM restaurant WHERE curr_grade = 'R' group by zip;

---------------------------------------------------

-- some SQL to update the data


UPDATE restaurant SET phone="(925) 484-5588" WHERE id = 4325;
UPDATE restaurant SET url="http://www.urbanspoon.com/cities/6-sf-bay-area/restaurants/764695-sozo-sushi-restaurant/menu" WHERE id = 4325;

UPDATE review SET url="http://www.yelp.com/biz/sozo-sushi-restaurant-pleasanto" WHERE id = 4;
UPDATE review SET rating=3.5, SET dollar_rating =2  WHERE id = 4;

UPDATE review SET url="http://plus.google.com/101449956143090065701/" WHERE id = 5;

---------------------------------------------------

These are the command to backup and restore the database.

export database
mysqldump -u root -p acapp > acapp.sql

restore database
mysql -u root -p acapp < acapp.sql

There is a copy of the database in the project and can be used to initialize the database.  

-----------------------------------------------------

Grails configuration to connect to MySQL database

1) add the driver jar to acapp/lib

2) edit /acapp/grails-app/conf/DataSource.groovy

	a) change the driver in driverClassName in dataSource {}
	b) change the environments {} for all three

The value of the dbCreate propery in the DataSource.groovy is very important

Hibernate can automatically create the database tables required for your domain model. You have some control 
over when and how it does this through the dbCreate property, which can take these values:

create - Drops the existing schemaCreates the schema on startup, dropping existing tables, indexes, etc. first.
create-drop - Same as create, but also drops the tables when the application shuts down cleanly.
update - Creates missing tables and indexes, and updates the current schema without dropping any tables or data. Note that this can't properly handle many schema changes like column renames (you're left with the old column containing the existing data).
validate - Makes no changes to your database. Compares the configuration with the existing database schema and reports warnings.
any other value - does nothing

